#include "imports/stdlib.fc";
const op::add_wallet = "op::add_wallet"c;
const op::add_jw = "op::add_jw"c;
const op::transfer = "op::transfer"c;
const op::j_transfer = "op::j_transfer"c;
global slice sender_address;
global slice owner_addr;
global cell src_jw_dict;
global cell dest_jw_dict;
() save_data() impure inline { set_data(begin_cell()
    .store_slice(owner_addr)
    .store_dict(src_jw_dict)
    .store_dict(dest_jw_dict)
    .end_cell()); }
() load_data() impure {
    slice ds = get_data().begin_parse();
    owner_addr = ds~load_msg_addr(); 
    src_jw_dict = ds~load_dict(); 
    dest_jw_dict = ds~load_dict();
    ds.end_parse(); }
() main(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { return (); }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { return (); }
    sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    load_data();
    int query_id = in_msg_body~load_uint(64);
    if (op == op::add_wallet) {
        slice new_wallet_addr = in_msg_body~load_msg_addr();
        if (ctx_dest_wallet_addr_counter == 0) {
            dest_jw_dict~udict_set(32, ctx_dest_wallet_addr_counter, new_wallet_addr);
            ctx_dest_wallet_addr_counter = ctx_dest_wallet_addr_counter + 1;
        } else {
            (int a, slice b, int c) = dest_jw_dict.udict_get_max?(32);
            dest_jw_dict~udict_set(32, ctx_dest_wallet_addr_counter, new_wallet_addr);
            ctx_dest_wallet_addr_counter = ctx_dest_wallet_addr_counter + 1; }
        save_data(); return (); }
    if (op == op::add_jw) {
        
        save_data(); return (); }
    throw(0xffff); }
slice get_owner_addr() method_id { load_data(); return owner_addr; }
cell get_wallets() method_id { load_data(); return dest_jw_dict; }
slice get_wallet_by_index(int index) method_id { load_data(); (slice cs, int s?) = dest_jw_dict.udict_get?(32, index); return cs; }
