#include "imports/stdlib.fc";
const op::add_wallet = 0;
const op::add_jw = 1;
const op::transfer = 2;
const op::j_transfer = 3;
global slice sender_address;
global slice owner_addr;
global cell src_jw_dict;
global cell dest_jw_dict;
() load_data() impure inline {
    ~strdump("Start load_data");
    slice ds = get_data().begin_parse();
    owner_addr = ds~load_msg_addr();
    ~dump(owner_addr);
    src_jw_dict = ds~load_dict(); 
    ~dump(src_jw_dict);
    dest_jw_dict = ds~load_dict();
    ~dump(dest_jw_dict);
    ds.end_parse(); 
    ~strdump("End load_data"); }
() save_data() impure { set_data(begin_cell()
    .store_slice(owner_addr)
    .store_dict(src_jw_dict)
    .store_dict(dest_jw_dict)
    .end_cell()); }
() main(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { return (); }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { return (); }
    sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    load_data();
    if (op == op::add_wallet) {
        ~strdump("Add wallet");
        slice new_wallet_addr = in_msg_body~load_msg_addr();
        ~dump(new_wallet_addr);
        (int k, slice x, int is?) = dest_jw_dict.udict_get_max?(32);
        ~dump(k); ~dump(x); ~dump(is?);
        if (is?) { 
            ~strdump("3");
            dest_jw_dict~udict_set(32, k + 1, new_wallet_addr); save_data(); return (); } else { 
            ~strdump("4");
            dest_jw_dict~udict_set(32, 0, new_wallet_addr);
            save_data(); return (); } }
    if (op == op::add_jw) {
        
        save_data(); return (); }
    throw(0xffff); }
slice get_owner_addr() method_id { load_data(); return (owner_addr); }
cell get_wallets() method_id { load_data(); return dest_jw_dict; }
slice get_wallet_by_index(int index) method_id { load_data(); (slice cs, int s?) = dest_jw_dict.udict_get?(32, index); return cs; }
